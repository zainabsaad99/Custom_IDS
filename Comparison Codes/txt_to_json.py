"""
    Author: Mounif El Khatib
    Description: This script reads a log file that is generated by the custom IDS and formats it into a JSON file.
"""
import json
import argparse


def parse_log(input_file, output_file):
    with open(input_file, "r") as f:
        # List to store the parsed JSON objects
        output_list = []
        for line in f:
            # Each line is converted to a JSON object
            parsed_json = {}
            try:
                # Parse datetime and attack type
                parts = line.strip().split(" - ")
                timestamp = parts[0]
                attack_info = parts[1]

                # Setting the time and type of attack
                parsed_json["datetime"] = timestamp.replace(" ", "T")
                parsed_json["attack"] = " ".join(attack_info.split()[:2])

                # Setting default values
                parsed_json["source_ip"] = "N/A"
                parsed_json["source_port"] = "N/A"
                parsed_json["destination_ip"] = "N/A"
                parsed_json["destination_port"] = "N/A"

                # Formatting the source IP and destination IP
                ip_section = attack_info.split("detected")[-1].strip()
                if "->" in ip_section:
                    src_dest = ip_section.split("->")
                    source = src_dest[0].strip().strip('-').strip()
                    dest = src_dest[1].strip().strip('-').strip()

                    # Handling the case where the attack port does not appear, setting it to N/A
                    if ":" in source:
                        parsed_json["source_ip"] = source.split(":")[0]
                        parsed_json["source_port"] = source.split(":")[1]
                    else:
                        parsed_json["source_ip"] = source

                    # Handle destination
                    if ":" in dest:
                        parsed_json["destination_ip"] = dest.split(":")[0]
                        parsed_json["destination_port"] = dest.split(":")[
                            1].rstrip()
                    else:
                        parsed_json["destination_ip"] = dest.rstrip(",")

                output_list.append(parsed_json)
            except Exception as e:
                print(f"Error: {e}")
        # Writing the parsed output to a file
        with open(output_file, "w") as out:
            json.dump(output_list, out, indent=4)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Parse log file to JSON")
    parser.add_argument("-o", "--output",
                        help="Output file name",
                        default="parsed-log.json")
    parser.add_argument("input",
                        help="Input log file")

    args = parser.parse_args()
    parse_log(args.input, args.output)
